apiVersion: v1
kind: Namespace
metadata:
  labels:
    app: humor-memory-game
    app.kubernetes.io/managed-by: argocd
    app.kubernetes.io/part-of: humor-game
  name: humor-game
---
apiVersion: v1
data:
  API_BASE_URL: /api
  API_PORT: "3001"
  CORS_ORIGIN: http://localhost:3000,http://localhost:8080,https://gameapp.games
  DB_NAME: humor_memory_game
  DB_USER: gameuser
  FRONTEND_URL: http://localhost:8080
  NODE_ENV: development
  REDIS_HOST: redis
  REDIS_PORT: "6379"
kind: ConfigMap
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"v1","data":{"API_BASE_URL":"/api","API_PORT":"3001","CORS_ORIGIN":"http://localhost:3000,http://localhost:8080,https://gameapp.games","DB_NAME":"humor_memory_game","DB_USER":"gameuser","FRONTEND_URL":"http://localhost:8080","NODE_ENV":"development","REDIS_HOST":"redis","REDIS_PORT":"6379"},"kind":"ConfigMap","metadata":{"annotations":{},"name":"humor-game-config","namespace":"humor-game"}}
  creationTimestamp: "2025-08-22T11:11:24Z"
  labels:
    app.kubernetes.io/managed-by: argocd
    app.kubernetes.io/part-of: humor-game
  name: humor-game-config
  namespace: humor-game
  resourceVersion: "62282"
  uid: 2b3217c8-cbbe-4a83-8b62-17a8d590af85
---
apiVersion: v1
data:
  01-init.sql: "-- Humor Memory Game Database Schema\n-- This file creates the schema
    and seeds data\n-- Copied from your working database/combined-init.sql file\n\n--
    Enable UUID extension for generating unique IDs\nCREATE EXTENSION IF NOT EXISTS
    \"uuid-ossp\";\n\n-- Drop tables if they exist (for clean reset)\nDROP TABLE IF
    EXISTS game_matches CASCADE;\nDROP TABLE IF EXISTS games CASCADE;\nDROP TABLE
    IF EXISTS users CASCADE;\nDROP VIEW IF EXISTS leaderboard;\n\n-- Create users
    table\nCREATE TABLE users (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n
    \   username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    display_name
    VARCHAR(100),\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,\n
    \   updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,\n    last_played
    TIMESTAMP WITH TIME ZONE,\n    total_games INTEGER DEFAULT 0,\n    total_score
    INTEGER DEFAULT 0,\n    best_score INTEGER DEFAULT 0,\n    best_time INTEGER,
    -- in milliseconds\n    is_active BOOLEAN DEFAULT true\n);\n\n-- Create games
    table to track individual game sessions\nCREATE TABLE games (\n    id UUID PRIMARY
    KEY DEFAULT uuid_generate_v4(),\n    user_id UUID REFERENCES users(id) ON DELETE
    CASCADE,\n    username VARCHAR(50) NOT NULL, -- denormalized for faster queries\n
    \   score INTEGER NOT NULL DEFAULT 0,\n    moves INTEGER NOT NULL DEFAULT 0,\n
    \   time_elapsed INTEGER NOT NULL DEFAULT 0, -- in milliseconds\n    cards_matched
    INTEGER NOT NULL DEFAULT 0,\n    difficulty_level VARCHAR(20) DEFAULT 'easy',
    -- easy, medium, hard, expert\n    game_completed BOOLEAN DEFAULT false,\n    started_at
    TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,\n    completed_at TIMESTAMP
    WITH TIME ZONE,\n    game_data JSONB -- store card positions, matches, etc.\n);\n\n--
    Create game_matches table to track individual card matches\nCREATE TABLE game_matches
    (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    game_id UUID REFERENCES
    games(id) ON DELETE CASCADE,\n    card1_id VARCHAR(50) NOT NULL,\n    card2_id
    VARCHAR(50) NOT NULL,\n    match_time INTEGER NOT NULL, -- time when match was
    made (ms from game start)\n    points_earned INTEGER DEFAULT 10,\n    bonus_points
    INTEGER DEFAULT 0,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP\n);\n\n--
    Create leaderboard view for easy querying\nCREATE OR REPLACE VIEW leaderboard
    AS\nSELECT \n    u.username,\n    u.display_name,\n    u.total_games,\n    u.total_score,\n
    \   u.best_score,\n    u.best_time,\n    u.last_played,\n    CASE \n        WHEN
    u.total_games > 0 THEN ROUND(u.total_score::decimal / u.total_games, 2)\n        ELSE
    0 \n    END as avg_score,\n    ROW_NUMBER() OVER (ORDER BY u.best_score DESC,
    u.best_time ASC) as rank\nFROM users u\nWHERE u.is_active = true AND u.total_games
    > 0\nORDER BY u.best_score DESC, u.best_time ASC;\n\n-- Create indexes for better
    performance\nCREATE INDEX IF NOT EXISTS idx_users_username ON users(username);\nCREATE
    INDEX IF NOT EXISTS idx_users_best_score ON users(best_score DESC);\nCREATE INDEX
    IF NOT EXISTS idx_users_last_played ON users(last_played);\nCREATE INDEX IF NOT
    EXISTS idx_games_user_id ON games(user_id);\nCREATE INDEX IF NOT EXISTS idx_games_score
    ON games(score DESC);\nCREATE INDEX IF NOT EXISTS idx_games_completed_at ON games(completed_at);\nCREATE
    INDEX IF NOT EXISTS idx_game_matches_game_id ON game_matches(game_id);\n\n-- Create
    function to update user stats when a game is completed\nCREATE OR REPLACE FUNCTION
    update_user_stats()\nRETURNS TRIGGER AS $$\nBEGIN\n    -- Only update if game
    is being marked as completed\n    IF NEW.game_completed = true AND (OLD.game_completed
    = false OR OLD.game_completed IS NULL) THEN\n        UPDATE users \n        SET
    \n            total_games = total_games + 1,\n            total_score = total_score
    + NEW.score,\n            best_score = GREATEST(best_score, NEW.score),\n            best_time
    = CASE \n                WHEN best_time IS NULL OR NEW.time_elapsed < best_time
    \n                THEN NEW.time_elapsed \n                ELSE best_time \n            END,\n
    \           last_played = NEW.completed_at,\n            updated_at = CURRENT_TIMESTAMP\n
    \       WHERE id = NEW.user_id;\n    END IF;\n    \n    RETURN NEW;\nEND;\n$$
    LANGUAGE plpgsql;\n\n-- Create trigger to automatically update user stats\nDROP
    TRIGGER IF EXISTS trigger_update_user_stats ON games;\nCREATE TRIGGER trigger_update_user_stats\n
    \   AFTER UPDATE ON games\n    FOR EACH ROW\n    EXECUTE FUNCTION update_user_stats();\n\n--
    Grant permissions to the game user\nGRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA
    public TO gameuser;\nGRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO
    gameuser;\nGRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA public TO gameuser;\n\n--
    Insert sample users with funny usernames\nINSERT INTO users (username, email,
    display_name, total_games, total_score, best_score, best_time, last_played) VALUES\n
    \   ('memorymaster42', 'master@example.com', '\U0001F9E0 Memory Master', 15, 2340,
    200, 45000, CURRENT_TIMESTAMP - INTERVAL '2 hours'),\n    ('cardshark_jenny',
    'jenny@example.com', '\U0001F988 Card Shark Jenny', 12, 1890, 180, 52000, CURRENT_TIMESTAMP
    - INTERVAL '1 day'),\n    ('emoji_ninja', 'ninja@example.com', '\U0001F977 Emoji
    Ninja', 8, 1440, 190, 48000, CURRENT_TIMESTAMP - INTERVAL '3 hours'),\n    ('laugh_machine',
    'laugh@example.com', '\U0001F602 Laugh Machine', 20, 2800, 175, 55000, CURRENT_TIMESTAMP
    - INTERVAL '30 minutes'),\n    ('puzzle_pirate', 'pirate@example.com', '\U0001F3F4‍☠️
    Puzzle Pirate', 6, 780, 150, 62000, CURRENT_TIMESTAMP - INTERVAL '2 days'),\n
    \   ('memory_mango', 'mango@example.com', '\U0001F96D Memory Mango', 10, 1500,
    165, 58000, CURRENT_TIMESTAMP - INTERVAL '5 hours'),\n    ('giggle_guru', 'guru@example.com',
    '\U0001F913 Giggle Guru', 18, 2520, 185, 47000, CURRENT_TIMESTAMP - INTERVAL '1
    hour'),\n    ('chuckle_champ', 'champ@example.com', '\U0001F3C6 Chuckle Champ',
    14, 2100, 170, 51000, CURRENT_TIMESTAMP - INTERVAL '4 hours')\nON CONFLICT (username)
    DO NOTHING;\n\n-- Success message\nDO $$\nBEGIN\n    RAISE NOTICE '\U0001F3AE
    ========================================';\n    RAISE NOTICE '\U0001F3AF HUMOR
    MEMORY GAME DATABASE READY! \U0001F602';\n    RAISE NOTICE '\U0001F3AE ========================================';\n
    \   RAISE NOTICE 'Schema created: users, games, game_matches';\n    RAISE NOTICE
    'Views created: leaderboard';\n    RAISE NOTICE 'Functions created: update_user_stats';\n
    \   RAISE NOTICE 'Sample data inserted: 8 funny users';\n    RAISE NOTICE '\U0001F680
    Ready for some hilarious memory gaming! \U0001F0CF✨';\n    RAISE NOTICE '\U0001F3AE
    ========================================';\nEND $$;\n"
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/managed-by: argocd
    app.kubernetes.io/part-of: humor-game
  name: postgres-init
  namespace: humor-game
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/managed-by: argocd
    app.kubernetes.io/part-of: humor-game
  name: backend
  namespace: humor-game
spec:
  ports:
  - port: 3001
  selector:
    app: backend
    app.kubernetes.io/managed-by: argocd
    app.kubernetes.io/part-of: humor-game
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/managed-by: argocd
    app.kubernetes.io/part-of: humor-game
  name: frontend
  namespace: humor-game
spec:
  ports:
  - port: 80
  selector:
    app: frontend
    app.kubernetes.io/managed-by: argocd
    app.kubernetes.io/part-of: humor-game
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/managed-by: argocd
    app.kubernetes.io/part-of: humor-game
  name: postgres
  namespace: humor-game
spec:
  ports:
  - port: 5432
  selector:
    app: postgres
    app.kubernetes.io/managed-by: argocd
    app.kubernetes.io/part-of: humor-game
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/managed-by: argocd
    app.kubernetes.io/part-of: humor-game
  name: redis
  namespace: humor-game
spec:
  ports:
  - port: 6379
  selector:
    app: redis
    app.kubernetes.io/managed-by: argocd
    app.kubernetes.io/part-of: humor-game
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app.kubernetes.io/managed-by: argocd
    app.kubernetes.io/part-of: humor-game
  name: postgres-pvc
  namespace: humor-game
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/managed-by: argocd
    app.kubernetes.io/part-of: humor-game
  name: backend
  namespace: humor-game
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
      app.kubernetes.io/managed-by: argocd
      app.kubernetes.io/part-of: humor-game
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "3001"
        prometheus.io/scrape: "true"
      labels:
        app: backend
        app.kubernetes.io/managed-by: argocd
        app.kubernetes.io/part-of: humor-game
    spec:
      containers:
      - env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              key: NODE_ENV
              name: humor-game-config
        - name: PORT
          valueFrom:
            configMapKeyRef:
              key: API_PORT
              name: humor-game-config
        - name: DB_HOST
          value: postgres
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              key: DB_NAME
              name: humor-game-config
        - name: DB_USER
          valueFrom:
            configMapKeyRef:
              key: DB_USER
              name: humor-game-config
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: DB_PASSWORD
              name: humor-game-secrets
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              key: REDIS_HOST
              name: humor-game-config
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: REDIS_PASSWORD
              name: humor-game-secrets
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              key: JWT_SECRET
              name: humor-game-secrets
        - name: CORS_ORIGIN
          valueFrom:
            configMapKeyRef:
              key: CORS_ORIGIN
              name: humor-game-config
        - name: FRONTEND_URL
          valueFrom:
            configMapKeyRef:
              key: FRONTEND_URL
              name: humor-game-config
        - name: API_BASE_URL
          valueFrom:
            configMapKeyRef:
              key: API_BASE_URL
              name: humor-game-config
        image: humor-game-backend:latest
        imagePullPolicy: Never
        livenessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 30
          periodSeconds: 10
        name: backend
        ports:
        - containerPort: 3001
        readinessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          limits:
            cpu: 500m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 128Mi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/managed-by: argocd
    app.kubernetes.io/part-of: humor-game
  name: frontend
  namespace: humor-game
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
      app.kubernetes.io/managed-by: argocd
      app.kubernetes.io/part-of: humor-game
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "80"
        prometheus.io/scrape: "true"
      labels:
        app: frontend
        app.kubernetes.io/managed-by: argocd
        app.kubernetes.io/part-of: humor-game
    spec:
      containers:
      - env:
        - name: API_BASE_URL
          valueFrom:
            configMapKeyRef:
              key: API_BASE_URL
              name: humor-game-config
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              key: NODE_ENV
              name: humor-game-config
        image: humor-game-frontend:latest
        imagePullPolicy: Never
        name: frontend
        ports:
        - containerPort: 80
        resources:
          limits:
            cpu: 200m
            memory: 128Mi
          requests:
            cpu: 50m
            memory: 64Mi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/managed-by: argocd
    app.kubernetes.io/part-of: humor-game
  name: postgres
  namespace: humor-game
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
      app.kubernetes.io/managed-by: argocd
      app.kubernetes.io/part-of: humor-game
  template:
    metadata:
      labels:
        app: postgres
        app.kubernetes.io/managed-by: argocd
        app.kubernetes.io/part-of: humor-game
    spec:
      containers:
      - env:
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              key: DB_NAME
              name: humor-game-config
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              key: DB_USER
              name: humor-game-config
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              key: DB_PASSWORD
              name: humor-game-secrets
        image: postgres:15-alpine
        imagePullPolicy: Always
        name: postgres
        ports:
        - containerPort: 5432
        resources:
          limits:
            cpu: 1000m
            memory: 512Mi
          requests:
            cpu: 250m
            memory: 256Mi
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: postgres-storage
        - mountPath: /docker-entrypoint-initdb.d
          name: schema-file
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
      - configMap:
          items:
          - key: 01-init.sql
            mode: 420
            path: 01-init.sql
          name: postgres-init
        name: schema-file
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/managed-by: argocd
    app.kubernetes.io/part-of: humor-game
  name: redis
  namespace: humor-game
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
      app.kubernetes.io/managed-by: argocd
      app.kubernetes.io/part-of: humor-game
  template:
    metadata:
      labels:
        app: redis
        app.kubernetes.io/managed-by: argocd
        app.kubernetes.io/part-of: humor-game
    spec:
      containers:
      - command:
        - sh
        - -c
        - exec redis-server --appendonly yes --requirepass "$REDIS_PASSWORD"
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: REDIS_PASSWORD
              name: humor-game-secrets
        image: redis:7-alpine
        imagePullPolicy: Always
        name: redis
        ports:
        - containerPort: 6379
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 100m
            memory: 64Mi
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: HTTP
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: '*'
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
  labels:
    app.kubernetes.io/managed-by: argocd
    app.kubernetes.io/part-of: humor-game
  name: argocd-ingress
  namespace: argocd
spec:
  ingressClassName: humor-game-nginx
  rules:
  - host: argocd.gameapp.local
    http:
      paths:
      - backend:
          service:
            name: argocd-server
            port:
              number: 80
        path: /
        pathType: Prefix
  - host: argocd.gameapp.games
    http:
      paths:
      - backend:
          service:
            name: argocd-server
            port:
              number: 80
        path: /
        pathType: Prefix
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: '*'
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
  labels:
    app.kubernetes.io/managed-by: argocd
    app.kubernetes.io/part-of: humor-game
  name: humor-game-ingress
  namespace: humor-game
spec:
  ingressClassName: humor-game-nginx
  rules:
  - host: gameapp.local
    http:
      paths:
      - backend:
          service:
            name: backend
            port:
              number: 3001
        path: /api
        pathType: Prefix
      - backend:
          service:
            name: frontend
            port:
              number: 80
        path: /
        pathType: Prefix
  - host: gameapp.games
    http:
      paths:
      - backend:
          service:
            name: backend
            port:
              number: 3001
        path: /api
        pathType: Prefix
      - backend:
          service:
            name: frontend
            port:
              number: 80
        path: /
        pathType: Prefix
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/auth-realm: Monitoring Access Required
    nginx.ingress.kubernetes.io/auth-secret: monitoring-auth
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: '*'
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
  labels:
    app.kubernetes.io/managed-by: argocd
    app.kubernetes.io/part-of: humor-game
  name: monitoring-ingress
  namespace: monitoring
spec:
  ingressClassName: humor-game-nginx
  rules:
  - host: prometheus.gameapp.local
    http:
      paths:
      - backend:
          service:
            name: prometheus
            port:
              number: 9090
        path: /
        pathType: Prefix
  - host: grafana.gameapp.local
    http:
      paths:
      - backend:
          service:
            name: grafana
            port:
              number: 3000
        path: /
        pathType: Prefix
  - host: prometheus.gameapp.games
    http:
      paths:
      - backend:
          service:
            name: prometheus
            port:
              number: 9090
        path: /
        pathType: Prefix
  - host: grafana.gameapp.games
    http:
      paths:
      - backend:
          service:
            name: grafana
            port:
              number: 3000
        path: /
        pathType: Prefix
